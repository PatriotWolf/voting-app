generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  password       String?
  role           UserRole         @default(USER)
  polls          Poll[]
  PollOptionVote PollOptionVote[]

  @@map(name: "users")
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  totalCount  Int      @default(0)
  createdAt   DateTime @default(now())
  endsAt      DateTime @default(now())
  updatedAt   DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  options        PollOption[]
  PollOptionVote PollOptionVote[]

  @@index([userId])
  @@map(name: "polls")
}

model PollOption {
  id         String           @id @default(cuid())
  text       String?
  totalCount Int              @default(0)
  Poll       Poll             @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId     String
  userVotes  PollOptionVote[]

  @@index([pollId])
  @@map(name: "poll_options")
}

model PollOptionVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String

  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String

  @@id([userId, pollId])
  @@index([pollId])
  @@map(name: "poll_option_votes")
}
